clear;

D:=372894729;
x:=32154396145754238913904610480940111260824799292693486280615353684230401284; //4 mod 12
assert x mod 12 eq 4;
p:=x^2-x+1;
q:=x^2+1;
assert IsPrime(p: Proof:=false);
assert IsPrime(q: Proof:=false);
Fp:=GF(p);
Fq:=GF(q);

////////////////////////////////////////////////////////////
//Construct Ecalhat
////////////////////////////////////////////////////////////
Fq3:=ExtensionField<Fq,x|IrreduciblePolynomial(Fq,3)>;
Ecalhat:=BaseChange(EllipticCurve([Fq|0,1]),Fq3);
assert #Ecalhat eq (q^3+1);
assert (q^3+1) mod p eq 0;

////////////////////////////////////////////////////////////
//Construct Ecal
////////////////////////////////////////////////////////////
Fp2<mu>:=ExtensionField<Fp,x|x^2+2>;
Fp4<nu>:=ExtensionField<Fp2,x|x^2-mu>;
//Broker's algorithm
bCalhat:=(870243541907538636476096312366753908753681606133031934858115999214069387962720619838785825090674830689438488032738259270417678227960818448788974193*mu +
    913011671916266906313293900013532069304873835348706441969580482172912471474428280645179896737658349004672355079152636511111465312399086247869400167)*nu +
    (731216686499465503119147927728775510091481363483878578517409859041072137613812275343046672555228493088018845587875826605269905241679305802546075707*mu +
    533761454853494124179007030361172965655565195549158261755915276106874602517550416312732575152273003763557642252333028062768734566742599627565358601);
aCalhat:= (405588634013455014185145439588167864349633871275777356090127835494737556341185951867676388091150617338306681595145959759114369938887928352098356141*mu + 
    351798687612696853331801975697324619003011410979614061984647117185853200926654147403739491092800379299689525363626613106328364788532788430637221880)*nu +
    (682436908538963715215889057022226319866046819130615170689552006300866431600481742644207230148201145895731682676199925430020483270463248335787410748*mu +
    464288645004416299297092850760114330880978791888060330992496139092093469256043278255463189754077505057353315079339285595126203550964325274729574375);
Ecal:=EllipticCurve([Fp4|aCalhat,bCalhat]);
assert (p^2+1)^2*Random(Ecal) eq Ecal!0;

////////////////////////////////////////////////////////////
//Construct E
////////////////////////////////////////////////////////////
//jp is a root of Hilbert Class Polynomial H_D(X) in Fp[X]
//jp:=962026395949240423645325791548048782758546535769297318835760487825559300576630327887372927370893831478551432167234803431375779368544923074200861201;
//E:=EllipticCurveFromjInvariant(Fp!jp);
a:=295366402817990747167057193017267738369013217753563482513857148440682964952557353688015611556562594478711044492190492708738012606935628554932263592;
b:=443172385862113560342781278596847148685329269880791170430971807402500493446289560868885032735056319872018885597733528601223183959381934469573920189;
E:=EllipticCurve([Fp|a,b]);
h:=541267069089752893881108215061552635910379595918837437128308713411365523057712426367130;
r:=1910157204347957325700187962477453761504460135807772883063193;
assert IsPrime(r: Proof:=false);
N:=h*r;
assert N*Random(E) eq E!0;
assert Evaluate(CyclotomicPolynomial(4),p) mod r eq 0; 

////////////////////////////////////////////////////////////
//Construct Ebold and Eboldhat: D=-547
////////////////////////////////////////////////////////////
Fr:=GF(r);
rhat:=1910157204347957325700187962480217512925138482090399484362397;
assert IsPrime(rhat: Proof:=false);
Frhat:=GF(rhat);
//solve H_D(j)=0 \in Fr[x]
bbold:=1289296492403480076359494314731478118452955985948858157354653;
abold:=310430355972238624670346823872987821525752074929457362854270;
Ebold:=EllipticCurve([Fr|abold,bbold]);
bboldhat:=1538008641579097707704221968675032141849999412179326013460607;
aboldhat:=73275333332267847499581501376863252276520692179021512625126;
Eboldhat:=EllipticCurve([Frhat|aboldhat,bboldhat]);

assert rhat*Random(Ebold) eq Ebold!0;
assert r*Random(Eboldhat) eq Eboldhat!0;

////////////////////////////////////////////////////////////
//Construct Ebold_W
////////////////////////////////////////////////////////////
b:=4438;
Ebold_W:=EllipticCurve([Fr|-3,b]);
N_W:=1910157204347957325700187962478004568967839998251779068625667;
Ebold_Wt:=QuadraticTwist(Ebold_W);
N_Wt:=1910157204347957325700187962476902954041080273363766697500721;
assert IsPrime(N_W: Proof:=false);
assert IsPrime(N_Wt: Proof:=false);
assert N_W*Random(Ebold_W) eq Ebold_W!0;
assert N_Wt*Random(Ebold_Wt) eq Ebold_Wt!0;

////////////////////////////////////////////////////////////
//Construct Ebold_Ed
////////////////////////////////////////////////////////////
d:=96027;
AS<X,Y>:=AffineSpace(Fr,2);
Ebold_Ed:=Curve(AS,-X^2+Y^2-(1+d*X^2*Y^2));
E_Ed:=EllipticCurve(ProjectiveClosure(Ebold_Ed),Ebold_Ed![0,1]);
r_Ed:=238769650543494665712523495309664950586333074547011512911983;
E_Edt:=QuadraticTwist(E_Ed);
r_Edt:=477539301086989331425046990619396979579563918809863415707631;
assert IsPrime(r_Ed: Proof:=false);
assert IsPrime(r_Edt: Proof:=false);
N_Ed:=2^3*r_Ed;
N_Edt:=2^2*r_Edt;
assert N_Ed*Random(E_Ed) eq E_Ed!0;
assert N_Edt*Random(E_Edt) eq E_Edt!0;


