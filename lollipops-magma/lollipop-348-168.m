clear;

D:=8310359121;
x:=18730795424809979326402376689387157903286098711640760; //4 mod 12
assert x mod 12 eq 4;
p:=x^2-x+1;
q:=x^2+1;
assert IsPrime(p: Proof:=false);
assert IsPrime(q: Proof:=false);
Fp:=GF(p);
Fq:=GF(q);

////////////////////////////////////////////////////////////
//Construct Ecalhat
////////////////////////////////////////////////////////////
Fq3:=ExtensionField<Fq,x|IrreduciblePolynomial(Fq,3)>;
Ecalhat:=BaseChange(EllipticCurve([Fq|0,1]),Fq3);
assert #Ecalhat eq (q^3+1);
assert (q^3+1) mod p eq 0;

////////////////////////////////////////////////////////////
//Construct Ecal
////////////////////////////////////////////////////////////
Fp2<mu>:=ExtensionField<Fp,x|x^2+7>;
Fp4<nu>:=ExtensionField<Fp2,x|x^2-mu>;
//Broker's algorithm
bCalhat:=(169016281573142671854143564787848026375919429824516587272659623946419686131415531131697064393139908516866*mu + 86187152153407984573987448965434036624964597453498028225292129840144528345189376073367297868415381289903)*nu + 
    (272212539623685209762065144458269743622624984595069886584074106292890663544222298755326989746482267600361*mu +
    145376408732160817796671059917558926943546511140084414048888616030656865226329426887966617118675322169071);
aCalhat:= (168974080964038956231283636531346923966819141472136259520329258817975356275552764707548265780013822921506*mu + 310349600540799582979134954262380938303781887572205721169109609019625552584820323567244258384975249055921)*nu + 
    (213470260072318221565168009785716069311369696026006878656141317640576345507667312063131780921722112101269*mu + 268204501298734254867773262509560740089817960839490859151260690102468657815760831898958196660219639647661);
Ecal:=EllipticCurve([Fp4|aCalhat,bCalhat]);
assert (p^2+1)^2*Random(Ecal) eq Ecal!0;

////////////////////////////////////////////////////////////
//Construct E
////////////////////////////////////////////////////////////
//jp is a root of Hilbert Class Polynomial H_D(X) in Fp[X]
//jp:=131618865205567019212296103179083089410656907141639496613315038797889870300929599596361025178042220560651;
//E:=EllipticCurveFromjInvariant(Fp!jp);
a:=342835129323924499008655004799016019971966028270472859177952722490480493914165216596373482769595669340485;
b:=16015135844315909778051082125555442284010212748867744323807222916213874759053806302247353371673824792712;
E:=EllipticCurve([Fp|a,b]);
h:=1067012066356924401175091606503601567727718410178378282;
r:=328808556442999639694811652149369705894374078352901;
assert IsPrime(r: Proof:=false);
N:=h*r;
assert N*Random(E) eq E!0;
assert Evaluate(CyclotomicPolynomial(4),p) mod r eq 0; 

////////////////////////////////////////////////////////////
//Construct Ebold and Eboldhat: D=-43
////////////////////////////////////////////////////////////
Fr:=GF(r);
rhat:=328808556442999639694811678498803847904551001194911;
assert IsPrime(rhat: Proof:=false);
Frhat:=GF(rhat);

//solve H_D(j)=0 \in Fr[x]
//j:=328808556442999639694811652149369705894373193616901
bbold:=252740258330072390876526638281348564737456972318352;
abold:=202438427277963444256548333008695423525645592193725;
Ebold:=EllipticCurve([Fr|abold,bbold]);
bboldhat:=128609755086274286277341274592192719840667413396585;
aboldhat:=277892116594404060417859195672195872889613282570644;
Eboldhat:=EllipticCurve([Frhat|aboldhat,bboldhat]);

assert rhat*Random(Ebold) eq Ebold!0;
assert r*Random(Eboldhat) eq Eboldhat!0;

////////////////////////////////////////////////////////////
//Construct Ebold_W
////////////////////////////////////////////////////////////
b:=26688;
Ebold_W:=EllipticCurve([Fr|-3,b]);
N_W:=328808556442999639694811656686137563768670250283477;
Ebold_Wt:=QuadraticTwist(Ebold_W);
N_Wt:=328808556442999639694811647612601848020077906422327;
assert IsPrime(N_W: Proof:=false);
assert IsPrime(N_Wt: Proof:=false);
assert N_W*Random(Ebold_W) eq Ebold_W!0;
assert N_Wt*Random(Ebold_Wt) eq Ebold_Wt!0;

////////////////////////////////////////////////////////////
//Construct Ebold_Ed
////////////////////////////////////////////////////////////
d:=78971;
AS<X,Y>:=AffineSpace(Fr,2);
Ebold_Ed:=Curve(AS,-X^2+Y^2-(1+d*X^2*Y^2));
E_Ed:=EllipticCurve(ProjectiveClosure(Ebold_Ed),Ebold_Ed![0,1]);
r_Ed:=41101069555374954961851454584629740070294024716789;
E_Edt:=QuadraticTwist(E_Ed);
r_Edt:=82202139110749909923702916905425372806598989742873;
assert IsPrime(r_Ed: Proof:=false);
assert IsPrime(r_Edt: Proof:=false);
N_Ed:=2^3*r_Ed;
N_Edt:=2^2*r_Edt;
assert N_Ed*Random(E_Ed) eq E_Ed!0;
assert N_Edt*Random(E_Edt) eq E_Edt!0;
