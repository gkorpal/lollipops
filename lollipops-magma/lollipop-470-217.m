clear;

D:=6965939657;
x:=41017810644370519329494203616760901248076654180501723109501324253299656; //4 mod 12
assert x mod 12 eq 4;
p:=x^2-x+1;
q:=x^2+1;
assert IsPrime(p: Proof:=false);
assert IsPrime(q: Proof:=false);
Fp:=GF(p);
Fq:=GF(q);

////////////////////////////////////////////////////////////
//Construct Ecalhat
////////////////////////////////////////////////////////////
Fq3:=ExtensionField<Fq,x|IrreduciblePolynomial(Fq,3)>;
Ecalhat:=BaseChange(EllipticCurve([Fq|0,1]),Fq3);
assert #Ecalhat eq (q^3+1);
assert (q^3+1) mod p eq 0;

////////////////////////////////////////////////////////////
//Construct Ecal
////////////////////////////////////////////////////////////
Fp2<mu>:=ExtensionField<Fp,x|x^2+11>;
Fp4<nu>:=ExtensionField<Fp2,x|x^2-mu>;
//Broker's algorithm
bCalhat:=(608584255541102457636091363484192800083905884469305674745499770947890526090874253869814774360556679361800800581578197107967866473632327259626*mu +
    113443062397016391844287922757380821664445323109775096539429151538045141653199708451854785290286042937874546593871039585188982462477883231366)*nu +
    (1409630242737695988734641801884426342166641732050313134184324236033017884079711427749065168990093552963659363378725033917120085301610462905406*mu +
    523231640819266737123028666643221048414901466974061659533043924230118602521868480237325455587148006014823045984077078437745556459592928792356);
aCalhat:= (1425760782400294083442314113122823819649585485569727741266407409114273806414602285303836616179518885548793530495643010274764793397290906660440*mu +
    1457192760237996892214597895335455591171407829588833526766600050162156513064658789072762685083521783082374211625077046418386363313621974578051)*nu +
    (334828419654248449643394727486063473169606306089675371414510798590708405005862207422099118377236303409036142522755800484733557691763562892617*mu +
    1054946265028572259667773408561670479234690096114748295919923348052652971497481548561267200523476705947709630891380197347570265622085860180083);
Ecal:=EllipticCurve([Fp4|aCalhat,bCalhat]);
assert (p^2+1)^2*Random(Ecal) eq Ecal!0;

////////////////////////////////////////////////////////////
//Construct E
////////////////////////////////////////////////////////////
//jp is a root of Hilbert Class Polynomial H_D(X) in Fp[X]
//jp:=1507464754211275406254096586038619357904641506420886966377117456282256058917942613308963659105598649736960282573982396735203927054433364340103;
//E:=EllipticCurveFromjInvariant(Fp!jp);
a:=1327990018058997133681768793847459298412155220404619946408082869787021354355048628527823235522470852643487954761371206623471768271979222734845;
b:=708941543996876688897277334443653439693630404247452418164940739285213127069641107370051700296315899700122891638230625431305175753000507367672;
E:=EllipticCurve([Fp|a,b]);
h:=9034012053615243147203403657060523197318728513853827060483599637973739779322;
r:=186236279083128524985138411183953815550851100697371406634456158733;
N:=h*r;
assert N*Random(E) eq E!0;
assert Evaluate(CyclotomicPolynomial(4),p) mod r eq 0; 

////////////////////////////////////////////////////////////
//Construct Ebold and Eboldhat: D=-2003
////////////////////////////////////////////////////////////
Fr:=GF(r);
rhat:=186236279083128524985138411183953117888342826972616244338768370521;
assert IsPrime(rhat: Proof:=false);
Frhat:=GF(rhat);

bbold:=124809371884429496704386448120873915025440467381259373541172188292;
abold:=96624061796766407320827550723318352944522575825349894983276301098;
Ebold:=EllipticCurve([Fr|abold,bbold]);
bboldhat:=177984627000469725155868893013715531990297872629364185436856586168;
aboldhat:=97243965582893662407203964677095351893193890657934151620340077437;
Eboldhat:=EllipticCurve([Frhat|aboldhat,bboldhat]);

assert rhat*Random(Ebold) eq Ebold!0;
assert r*Random(Eboldhat) eq Eboldhat!0;

////////////////////////////////////////////////////////////
//Construct Ebold_W
////////////////////////////////////////////////////////////
b:=72802;
Ebold_W:=EllipticCurve([Fr|-3,b]);
N_W:=186236279083128524985138411183953630590261444990257941922428141081;
Ebold_Wt:=QuadraticTwist(Ebold_W);
N_Wt:=186236279083128524985138411183954000511440756404484871346484176387;
assert IsPrime(N_W: Proof:=false);
assert IsPrime(N_Wt: Proof:=false);
assert N_W*Random(Ebold_W) eq Ebold_W!0;
assert N_Wt*Random(Ebold_Wt) eq Ebold_Wt!0;

////////////////////////////////////////////////////////////
//Construct Ebold_Ed
////////////////////////////////////////////////////////////
d:=70192;
AS<X,Y>:=AffineSpace(Fr,2);
Ebold_Ed:=Curve(AS,-X^2+Y^2-(1+d*X^2*Y^2));
E_Ed:=EllipticCurve(ProjectiveClosure(Ebold_Ed),Ebold_Ed![0,1]);
r_Ed:=46559069770782131246284602795988496143782096646259527443306381869;
E_Edt:=QuadraticTwist(E_Ed);
r_Edt:=23279534885391065623142301397994205815821726851213087936960848749;
assert IsPrime(r_Ed: Proof:=false);
assert IsPrime(r_Edt: Proof:=false);
N_Ed:=2^2*r_Ed;
N_Edt:=2^3*r_Edt;
assert N_Ed*Random(E_Ed) eq E_Ed!0;
assert N_Edt*Random(E_Edt) eq E_Edt!0;


