clear;

D:=118564569;
x:=14505229446120628393631280380693372180812753922328580; //4 mod 12
assert x mod 12 eq 4;
p:=x^2-x+1;
q:=x^2+1;
assert IsPrime(p: Proof:=false);
assert IsPrime(q: Proof:=false);
Fp:=GF(p);
Fq:=GF(q);

////////////////////////////////////////////////////////////
//Construct Ecalhat
////////////////////////////////////////////////////////////
Fq3:=ExtensionField<Fq,x|IrreduciblePolynomial(Fq,3)>;
Ecalhat:=BaseChange(EllipticCurve([Fq|0,1]),Fq3);
assert #Ecalhat eq (q^3+1);
assert (q^3+1) mod p eq 0;

////////////////////////////////////////////////////////////
//Construct Ecal
////////////////////////////////////////////////////////////
Fp2<mu>:=ExtensionField<Fp,x|x^2+2>;
Fp4<nu>:=ExtensionField<Fp2,x|x^2-mu>;
//Broker's algorithm
bCalhat:=(55696157999656799703064027609539558258596517402326996423305474034093609596333463258769421536215530397688*mu +
        118337944135574455973933406963131619176074966572889859144358137195962232671102196728693470596636413595036)*nu +
        3040763573036970196577244633507418859214479405125375629904440644225086655309322933760742452485533331159*mu +
        134528876705761600192708147766336653911167437740221807687082988955892921996945421562317159412526771826172;
aCalhat:= (165078167554756045522081480249972274782325811208406171940294285361301795842067883362849079841238916292802*mu +
        128875293673607767411159154587345353840501070066384098475055072057032035620949642325671293341851301280758)*nu +
        99387678070294495403855592846626772314128507128494190420627733444864579844779389252409287590678959019486*mu +
        83302251388064223879552338528734433908401374486468557479475436908383817125045743250591691094268520278444;
Ecal:=EllipticCurve([Fp4|aCalhat,bCalhat]);
assert (p^2+1)^2*Random(Ecal) eq Ecal!0;

////////////////////////////////////////////////////////////
//Construct E
////////////////////////////////////////////////////////////
//jp is a root of Hilbert Class Polynomial H_D(X) in Fp[X]
//jp:=112033947612109092636923757647937460565325429754534791102163012555020484596299725578475850226933105892543;
//E:=EllipticCurveFromjInvariant(Fp!jp);
a:=154365075817765956644146531860722812736338204644670561317034883713082715332084781245346106711061071746061;
b:=112073210933677990653032546876116868994192077022495039943258980008051916579346486762702007855348981483520;
E:=EllipticCurve([Fp|a,b]);
h:=62767547858815003411389448244023574953757003834;
r:=3352077442277464689609430676169326638915393086826573839113;
assert IsPrime(r: Proof:=false);
N:=h*r;
assert N*Random(E) eq E!0;
assert Evaluate(CyclotomicPolynomial(4),p) mod r eq 0; 

////////////////////////////////////////////////////////////
//Construct Ebold and Eboldhat: D=-159307
////////////////////////////////////////////////////////////
Fr:=GF(r);
rhat:=3352077442277464689609430676229259591317272559693816458531;
assert IsPrime(rhat: Proof:=false);
Frhat:=GF(rhat);

//solve H_D(j)=0 \in Fr[x]
//j:=211615175370814087037058278587114299153075389681808819035;
bbold:=3231122741390077062596640368544875249164386543332496228795;
abold:= 1709272387200662551536046196941515974786954901810838130105;
Ebold:=EllipticCurve([Fr|abold,bbold]);
//j:=32172135377687500858099651144120953199379736655171322673;
bboldhat:=2833441997989364458901868983576327626296290636732114110511;
aboldhat:=259317722144050115353780846326465982510490961480851174010;
Eboldhat:=EllipticCurve([Frhat|aboldhat,bboldhat]);
assert rhat*Random(Ebold) eq Ebold!0;
assert r*Random(Eboldhat) eq Eboldhat!0;

////////////////////////////////////////////////////////////
//Construct Ebold_W
////////////////////////////////////////////////////////////
b:=11566;
Ebold_W:=EllipticCurve([Fr|-3,b]);
N_W:=3352077442277464689609430676108118949490211254485990907897;
Ebold_Wt:=QuadraticTwist(Ebold_W);
N_Wt:=3352077442277464689609430676230534328340574919167156770331;
assert IsPrime(N_W: Proof:=false);
assert IsPrime(N_Wt: Proof:=false);
assert N_W*Random(Ebold_W) eq Ebold_W!0;
assert N_Wt*Random(Ebold_Wt) eq Ebold_Wt!0;

////////////////////////////////////////////////////////////
//Construct Ebold_Ed
////////////////////////////////////////////////////////////
d:=69127;
AS<X,Y>:=AffineSpace(Fr,2);
Ebold_Ed:=Curve(AS,-X^2+Y^2-(1+d*X^2*Y^2));
E_Ed:=EllipticCurve(ProjectiveClosure(Ebold_Ed),Ebold_Ed![0,1]);
r_Ed:=419009680284683086201178834519886198372757853966525854679;
E_Edt:=QuadraticTwist(E_Ed);
r_Edt:=838019360569366172402357669044890922712180835480235210199;
assert IsPrime(r_Ed: Proof:=false);
assert IsPrime(r_Edt: Proof:=false);
N_Ed:=2^3*r_Ed;
N_Edt:=2^2*r_Edt;
assert N_Ed*Random(E_Ed) eq E_Ed!0;
assert N_Edt*Random(E_Edt) eq E_Edt!0;
