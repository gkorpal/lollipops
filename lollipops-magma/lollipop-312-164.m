clear;

D:=6110889;
x:=88548362472645954052294301731040588229291306280; //4 mod 12
assert x mod 12 eq 4;
p:=x^2-x+1;
q:=x^2+1;
assert IsPrime(p: Proof:=false);
assert IsPrime(q: Proof:=false);
Fp:=GF(p);
Fq:=GF(q);

////////////////////////////////////////////////////////////
//Construct Ecalhat
////////////////////////////////////////////////////////////
Fq3:=ExtensionField<Fq,x|IrreduciblePolynomial(Fq,3)>;
Ecalhat:=BaseChange(EllipticCurve([Fq|0,1]),Fq3);
assert #Ecalhat eq (q^3+1);
assert (q^3+1) mod p eq 0;

////////////////////////////////////////////////////////////
//Construct Ecal
////////////////////////////////////////////////////////////
Fp2<mu>:=ExtensionField<Fp,x|x^2+13>;
Fp4<nu>:=ExtensionField<Fp2,x|x^2-mu>;
//Broker's algorithm
bCalhat:=(1579068720131648942720078455656310773074752682189626704073136042532690845866515755228530304718*mu +
    4581727373665814458881199404108521279143490971182947103932047139724242629117010257278337181242)*nu +
    (1863714896694460132915469204283761501615857581610826279741681680158489049360020519774904286679*mu +
    6018993779663854272341694592090289123781211508552699798952940528645977640738820382310757124661);
aCalhat:= (3441720760619346169788335177559000968998067714462269923929891758089056900959282481485131184817*mu +
    4433126477580285416300824744983692266263999436623601882977515525042106518822495174161423655533)*nu + 
    (5403286718293628588466310798786335333137092521468306632377305479733936489451502241320311856517*mu +
    5628133598253202686598669176746454764851328357278419730653467047944716433197453684173585763401);
Ecal:=EllipticCurve([Fp4|aCalhat,bCalhat]);
assert (p^2+1)^2*Random(Ecal) eq Ecal!0;

////////////////////////////////////////////////////////////
//Construct E
////////////////////////////////////////////////////////////
//jp is a root of Hilbert Class Polynomial H_D(X) in Fp[X]
//jp:=2020815590058080404006122354672973186527178870673954213676584408461766151741936334583044307903;
//E:=EllipticCurveFromjInvariant(Fp!jp);
a:=4918196760020528488957309274160637989552623006853379633776038146580726449393830562995388116463;
b:=5845231473133131617905468256555351120971165286345867575128945905148493187776434528728176031316;
E:=EllipticCurve([Fp|a,b]);
h:=479174866017344482422371790835673988426974474;
r:=16363154774280844370399386199393878581235093199333;
assert IsPrime(r: Proof:=false);
N:=h*r;
assert N*Random(E) eq E!0;
assert Evaluate(CyclotomicPolynomial(4),p) mod r eq 0; 

////////////////////////////////////////////////////////////
//Construct Ebold and Eboldhat: D:=-192547
////////////////////////////////////////////////////////////
Fr:=GF(r);
rhat:=16363154774280844370399380579099997217150097132267;
assert IsPrime(rhat: Proof:=false);
Frhat:=GF(rhat);
//solve H_D(j)=0 \in Fr[x]
bbold:=10130730649810940861865736770518294535982648011430;
abold:=11297789449375373939466517814134731313243769193618;
Ebold:=EllipticCurve([Fr|abold,bbold]);
bboldhat:=11866290165562893738812085996745646179055374195229;
aboldhat:=2428427089943051900625431744980848291493254941149;
Eboldhat:=EllipticCurve([Frhat|aboldhat,bboldhat]);

assert rhat*Random(Ebold) eq Ebold!0;
assert r*Random(Eboldhat) eq Eboldhat!0;

////////////////////////////////////////////////////////////
//Construct Ebold_W
////////////////////////////////////////////////////////////
b:=6457;
Ebold_W:=EllipticCurve([Fr|-3,b]);
N_W:=16363154774280844370399391583683206277266055021737;
Ebold_Wt:=QuadraticTwist(Ebold_W);
N_Wt:=16363154774280844370399380815104550885204131376931;
assert IsPrime(N_W: Proof:=false);
assert IsPrime(N_Wt: Proof:=false);
assert N_W*Random(Ebold_W) eq Ebold_W!0;
assert N_Wt*Random(Ebold_Wt) eq Ebold_Wt!0;

////////////////////////////////////////////////////////////
//Construct Ebold_Ed
////////////////////////////////////////////////////////////
d:=2709;
AS<X,Y>:=AffineSpace(Fr,2);
Ebold_Ed:=Curve(AS,-X^2+Y^2-(1+d*X^2*Y^2));
E_Ed:=EllipticCurve(ProjectiveClosure(Ebold_Ed),Ebold_Ed![0,1]);
r_Ed:=2045394346785105546299923814239245827060627786917;
E_Edt:=QuadraticTwist(E_Ed);
r_Edt:=4090788693570211092599845471218447636496291025833;
assert IsPrime(r_Ed: Proof:=false);
assert IsPrime(r_Edt: Proof:=false);
N_Ed:=2^3*r_Ed;
N_Edt:=2^2*r_Edt;
assert N_Ed*Random(E_Ed) eq E_Ed!0;
assert N_Edt*Random(E_Edt) eq E_Edt!0;


